/*
 * Copyright 2015-2016 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

import java.text.SimpleDateFormat
import java.util.regex.Matcher

buildscript {
  repositories {
    ivy {
      url = 'http://forge.ispras.ru/repo'
      layout 'pattern', {
        artifact '[organization]/[ext]s/[artifact]-[revision](.[ext])'
      }
    }
    jcenter()
  }

  dependencies {
    classpath 'gradle:gradle-os-plugin:1.0'
  }
}

plugins {
  id 'net.saliman.properties' version '1.4.4'
  id 'net.researchgate.release' version '2.3.5'
  id "org.sonarqube" version "1.0"
}

apply plugin: 'os'
apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

repositories {
  ivy {
    url = 'http://forge.ispras.ru/repo'
    layout 'pattern', {
      artifact '[organization]/[ext]s/[artifact]-[revision](.[ext])'
      // z3
      artifact '[organization]/[artifact]-[revision](.[ext])'
    }
  }
  jcenter();
}

uploadArchives {
  repositories {
    mavenLocal()
  }
}

release {
  failOnCommitNeeded = false
  failOnUnversionedFiles = false

  versionPatterns = [
    // Increments build number: "0.2.5-alpha-150428" => "0.2.6-alpha-150428"
    /(^\d+\.\d+\.)(\d+)(-[^-]*)(-[^-]*$)/:
    { Matcher m, Project p -> m.replaceAll("${ m[0][1] }${ (m[0][2] as int) + 1 }${ m[0][3] }" ) }
  ]
}

String getCurrentDateString()  {
  new SimpleDateFormat( "yyMMdd" ).format( new Date() )
}

task unSnapshotVersion.doLast {
  def version = project.version.toString()
  version += '-' + getCurrentDateString()
   project.plugins.getPlugin( net.researchgate.release.ReleasePlugin.class )
  .updateVersionProperty( version )
}

String z3
String z3path

String cvc4
String cvc4path

windows {
  z3 = 'z3:z3:4.5.0-x64-win:@zip'
  z3path = 'tools/z3/bin/z3.exe'

  cvc4 = 'cvc4:cvc4:1.4-win32-opt:@exe'
  cvc4path = 'tools/cvc4-windows.exe'
}

unix {
  z3 = 'z3:z3:4.5.0-x64-ubuntu-14.04:@zip'
  z3path = 'tools/z3/bin/z3'

  cvc4 = 'cvc4:cvc4:2015-05-12-x86_64-linux-opt:@bin'
  cvc4path = 'tools/cvc4-unix.bin'
}

macOs {
  z3 = 'z3:z3:4.5.0-x64-osx-10.11.6:@zip'
  z3path = 'tools/z3/bin/z3'
}

dependencies {
  testCompile 'junit:junit:4.11'
  testCompile 'hamcrest:hamcrest-core:1.3'
  testRuntime z3
  testRuntime cvc4

  checkstyle 'com.puppycrawl.tools:checkstyle:6.12.1'
  pmd 'net.sourceforge.pmd:pmd-core:5.4.0'
  pmd 'net.sourceforge.pmd:pmd-java:5.4.0'
  findbugs 'com.google.code.findbugs:findbugs:3.0.1'
}

task getZ3(type: Copy) {
  windows {
    from zipTree( configurations.testRuntime.fileCollection { dep -> dep.name == 'z3' }.singleFile )
  }
  unix  {
    from zipTree( configurations.testRuntime.fileCollection { dep -> dep.name == 'z3' }.singleFile )
  }
  macOs {
    from zipTree( configurations.testRuntime.fileCollection { dep -> dep.name == 'z3' }.singleFile )
  }
  into 'tools/z3'
  eachFile {
    it.relativePath = RelativePath.parse( true, it.relativePath.segments[1..-1].join('/') )
  }
}

test.dependsOn getZ3

task getCVC4(type: Copy) {
  windows {
    from configurations.testRuntime.fileCollection { dep -> dep.name == 'cvc4' }.singleFile
    rename '.*', 'cvc4-windows.exe'
  }
  unix  {
    from configurations.testRuntime.fileCollection { dep -> dep.name == 'cvc4' }.singleFile
    rename '.*', 'cvc4-unix.bin'
  }
  fileMode 0555
  into 'tools'
}

test.dependsOn getCVC4

javadoc {
  failOnError = false
}

test {
  environment 'Z3_PATH', z3path
  environment 'CVC4_PATH', cvc4path

  testLogging.showStandardStreams = true
  ignoreFailures = true
}

compileJava {
  options.encoding = 'UTF-8'
  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'
}

checkstyle {
  toolVersion = 6.5
  ignoreFailures = true
  showViolations = false
  configFile=file("${project.projectDir}/config/checkstyle/google_checks.xml")
}

findbugs {
    ignoreFailures = true
}

pmd {
  ignoreFailures = true
  ruleSets = [ "java-android,java-basic,java-braces,java-clone,java-codesize,java-controversial,"
             + "java-coupling,java-design,java-empty,java-finalizers,java-imports,java-j2ee,"
             + "java-javabeans,java-junit,java-logging-jakarta-commons,java-logging-java,"
             + "java-migrating,java-migrating_to_13,java-migrating_to_14,java-migrating_to_15,"
             + "java-migrating_to_junit4,java-naming,java-optimizations,java-strictexception,"
             + "java-strings,java-sunsecure,java-typeresolution,java-unnecessary,java-unusedcode"]
  ruleSetFiles = files("config/pmd/java/comments.xml")
}

jacoco {
  toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
  }
}

sonarqube {
  properties {
    property "sonar.host.url", "http://forge.ispras.ru:9000"
    property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar"
    property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
    property "sonar.jdbc.username", "sonar"
    property "sonar.jdbc.password", "sonar"
  }
}

jar {
  archiveName = projectName + '.jar'

  from('LICENSE.txt') {
    into('META-INF/')
  }

  manifest {
    attributes 'Title'  : projectTitle
    attributes 'Version': project.version
    attributes 'Vendor' : 'ISP RAS (http://www.ispras.ru)'
    attributes 'Built-By': System.getProperty('user.name')
    attributes 'Built-JDK': System.getProperty('java.version')
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveName = projectName + '-src.jar'
  from(projectDir) {
    into(projectName)
    include('src/')
    include('config/')
  }

  from(files { projectDir.listFiles() }.filter { File file -> file.isFile() ? file : null }) {
    into(projectName)
    exclude('gradle-local.properties')
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveName = projectName + '-javadoc.jar'
  from javadoc.destinationDir
}

tasks.withType(Tar) {
  compression = Compression.GZIP
  extension = 'tar.gz'
}

distributions {
  main {
    baseName = projectName
    contents {
      rename(projectName + '.jar', 'lib/' + projectName + '.jar')

      from('ChangeLog')
      from('LICENSE.txt')

      from(sourcesJar) {
        into('src')
      }

      from(javadocJar) {
        into('javadoc')
      }
    }
  }
}

// def repoUrlStr = 'https://forge.ispras.ru/nexus/content/repositories/'
def repoUrlStr = repoUrl
def repoUserStr = hasProperty('repoUser') ? repoUser : "$System.env._REPO_USER"
def repoPasswordStr = hasProperty('repoPassword') ? repoPassword : "$System.env._REPO_PASSWORD"

publishing {
  publications {
    maven(MavenPublication) {
      groupId projectGroup
      artifactId projectName
      version project.version
      from components.java

      artifact(sourcesJar) {
        classifier = "sources"
      }

      artifact(distTar)
    }
  }

  repositories {
    maven {
      if(project.version.endsWith('-SNAPSHOT')) {
        url repoUrlStr + 'snapshots'
      } else {
        url repoUrlStr + 'releases'
      }
      credentials {
        username repoUserStr
        password repoPasswordStr
      }
      authentication {
        basic(BasicAuthentication)
      }
    }
  }
}

afterReleaseBuild.dependsOn publish
